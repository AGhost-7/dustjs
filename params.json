{"name":"Dustjs","tagline":"Asynchronous templates for the browser and node.js","body":"Dust  [![Build Status](https://secure.travis-ci.org/linkedin/dustjs.png)](http://travis-ci.org/linkedin/dustjs)\r\n====\r\n\r\nDemo & Guide\r\n------------\r\nExtensive docs and a full demo are available at <http://akdubya.github.com/dustjs>\r\n\r\nHighlights!\r\n----\r\n\r\nUse Dust if you want these things:\r\n\r\n* async/streaming operation\r\n* browser/node compatibility\r\n* extended Mustache/ctemplate syntax\r\n* clean, low-level API\r\n* [high performance](http://akdubya.github.com/dustjs/benchmark/index.html)\r\n* composable templates\r\n\r\n\r\nThis is the LinkedIn fork of dust.js\r\n====================================\r\n\r\nDetails in the blog post : http://engineering.linkedin.com/frontend/leaving-jsps-dust-moving-linkedin-dustjs-client-side-templates\r\n\r\nWe will gradually be extending this library with helper functions and bug fixes. \r\n\r\nCurrent LinkedIn additions include:\r\n--------------------------\r\n\r\n* Fix to peg.js to print the line and column number for syntax errors in dust templates\r\n* Fix to support > node0.4 \r\n* Addition of jasmine test suite, BDD with dust.js \r\n* There are cases of rendering logic that are best done in templates. @if helper that relies entirely on the js eval for expression evaluation, The perf results are here: <http://jsperf.com/dust-if>. We intend to replace the slow js eval with a expression parser soon \r\n* Section index for lists of maps stored in the dust context for ease of writing simple logic in templates\r\n* Section size for lists of maps stored in the dust context for ease of  writing simple logic in templates\r\n* Automated Travis CI integration, jasmine for BDD, code coverage report\r\n* Extend grammar to relax whitespace/eol \r\n* Add support for rhino in the dust core\r\n* improve compile times by 10X with changes to how we use peg parser\r\n* Extend filters for JSON.stringify and JSON.parse\r\n* logic helpers for select/ switch\r\n* Support numbers in dust inline params\r\n* Extend partials to support inline params\r\n* Support for array references, hence list elements can be accessed via the [] notation\r\n* Support dynamic blocks, similar to dynamic partials\r\n* Add pipe support for node\r\n* Documentation/wiki on the best practices for using dustjs\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nFor Linkedin Dustjs\r\n\r\n    $ npm install dustjs-linkedin\r\n\r\nTo render compiled templates in the browser:\r\n\r\n    <script src=\"dust-core-1.0.0.min.js\"></script>\r\n\r\nTo compile a template on the command line, use the dustc command.\r\nIts syntax is:\r\n\r\n    dustc [{-n|--name}=<template_name>] {inputfilename|-} [<outputfilename>]\r\n\r\nFor example, to compile a template on the command line and have it\r\nregistered under the same name as the source file:\r\n\r\n    $ dustc template.html\r\n\r\nYou can customize the name under which the template is registered:\r\n\r\n    $ dustc --name=mytemplate template.html\r\n\r\nRunning Tests\r\n------------\r\n\r\nTo run tests:\r\n\r\n    $ make test\r\n\r\nTo generate code coverage report:\r\n\r\n    $ npm install cover -g\r\n    $ make coverage\r\n    \r\nTo view HTML test coverage report:\r\n\r\n    $ open cover_html/index.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}